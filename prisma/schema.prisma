generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String    @unique
  password            String
  image               String?
  role                Role      @default(MEMBER)
  emailVerified       DateTime?
  resetToken          String?   @unique
  resetTokenCreatedAt DateTime?
  resetTokenExpiresAt DateTime?
  lastPasswordReset   DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  coachProfiles       Coach[]

  @@index([email])
  @@index([role])
}

model Location {
  id        Int      @id @default(autoincrement())
  district  String
  amphoe    String
  province  String
  zone      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coaches   Coach[]

  @@unique([district, amphoe, province], name: "district_amphoe_province")
  @@index([province])
  @@index([zone])
}

model TrainingBatch {
  id                  Int                @id @default(autoincrement())
  batchNumber         Int
  year                Int
  startDate           DateTime
  endDate             DateTime
  location            String
  maxParticipants     Int
  registrationEndDate DateTime
  description         String?            @db.Text
  isActive            Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  participants        BatchParticipant[]
}

model BatchParticipant {
  id           Int                 @id @default(autoincrement())
  batchId      Int
  coachId      Int
  registeredAt DateTime            @default(now())
  status       ParticipationStatus @default(PENDING)
  notes        String?             @db.Text
  isAttended   Boolean             @default(false)
  batch        TrainingBatch       @relation(fields: [batchId], references: [id])
  coach        Coach               @relation(fields: [coachId], references: [id])

  @@unique([batchId, coachId])
  @@index([batchId])
  @@index([coachId])
}

model Coach {
  id                    Int                @id @default(autoincrement())
  userId                Int
  teamName              String?
  nickname              String?
  gender                Gender
  age                   Int
  idCardNumber          String             @unique
  address               String             @db.Text
  phoneNumber           String
  lineId                String?
  religion              Religion
  hasMedicalCondition   Boolean            @default(false)
  medicalCondition      String?            @db.Text
  foodPreference        FoodPreference     @default(GENERAL)
  coachStatus           CoachStatus
  coachExperience       Int
  participationCount    Int
  accommodation         Boolean            @default(true)
  shirtSize             ShirtSize
  expectations          String?            @db.Text
  locationId            Int?
  isApproved            Boolean            @default(false)
  registrationCompleted Boolean            @default(false)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  batchParticipations   BatchParticipant[]
  location              Location?          @relation(fields: [locationId], references: [id])
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainings             CoachTraining[]

  @@index([userId])
  @@index([teamName])
  @@index([locationId])
}

model TrainingCourse {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  description    String?         @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  coachTrainings CoachTraining[]
}

model CoachTraining {
  id             Int            @id @default(autoincrement())
  coachId        Int
  courseId       Int
  certificateImg String?
  trainingYear   Int?
  notes          String?        @db.Text
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  coach          Coach          @relation(fields: [coachId], references: [id], onDelete: Cascade)
  course         TrainingCourse @relation(fields: [courseId], references: [id])

  @@unique([coachId, courseId])
  @@index([coachId])
  @@index([courseId])
}

enum Role {
  MEMBER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  LGBTQ
}

enum Religion {
  BUDDHIST
  CHRISTIAN
  ISLAM
  HINDU
  OTHER
}

enum FoodPreference {
  GENERAL
  VEGETARIAN
  HALAL
  JAY
}

enum CoachStatus {
  GOVERNMENT_EMPLOYEE
  CIVIL_SERVANT
  ACADEMY_EMPLOYEE
  ACADEMY_OWNER
  VOLUNTEER
  OTHER
}

enum ShirtSize {
  M
  L
  XL
  XXL
  XXXL
  XXXXL
  XXXXXL
}

enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}
