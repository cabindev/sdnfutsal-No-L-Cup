// app/dashboard/components/charts/BatchYearBarChart.tsx
'use client'

import { useEffect, useRef } from 'react';
import { Calendar } from 'lucide-react';
import * as echarts from 'echarts';

interface BatchYearBarChartProps {
  yearlyBatches: Record<string, any[]> | null | undefined;
}

export default function BatchYearBarChart({ yearlyBatches }: BatchYearBarChartProps) {
  const chartRef = useRef<HTMLDivElement>(null);
  const chartInstance = useRef<echarts.ECharts | null>(null);
  
  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
  useEffect(() => {
    return () => {
      if (chartInstance.current) {
        chartInstance.current.dispose();
      }
    };
  }, []);
  
  useEffect(() => {
    if (!yearlyBatches || typeof yearlyBatches !== 'object') {
      return;
    }
    
    const years = Object.keys(yearlyBatches).sort((a, b) => Number(a) - Number(b));
    if (years.length === 0) return;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á chart instance ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!chartInstance.current && chartRef.current) {
      chartInstance.current = echarts.init(chartRef.current);
    }
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
    let totalBatches = 0;
    let totalParticipants = 0;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏¢‡πà‡∏≠‡∏¢ (stack series)
    const batchSeriesData: Record<string, number[]> = {};
    const participantsData: number[] = [];
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ
    years.forEach(year => {
      const batches = yearlyBatches[year];
      if (!Array.isArray(batches)) return;
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      totalBatches += batches.length;
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ
      const yearParticipants = batches.reduce((sum, batch) => {
        const count = batch._count?.participants || 0;
        totalParticipants += count;
        return sum + count;
      }, 0);
      
      participantsData.push(yearParticipants);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ
      batches.forEach(batch => {
        const batchKey = `‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà ${batch.batchNumber || '?'}/${year}`;
        
        if (!batchSeriesData[batchKey]) {
          batchSeriesData[batchKey] = Array(years.length).fill(0);
        }
        
        const yearIndex = years.indexOf(year);
        if (yearIndex !== -1) {
          // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô stacked bar)
          batchSeriesData[batchKey][yearIndex] = 1;
        }
      });
    });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á series ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô
    const batchSeries = Object.keys(batchSeriesData).map(name => {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const yearFromName = name.split('/')[1];
      const batchNumberFromName = name.split(' ')[1].split('/')[0];
      
      const batch = (yearlyBatches[yearFromName] || []).find(
        b => String(b.batchNumber) === batchNumberFromName
      );
      
      const isActive = batch?.isActive;
      
      return {
        name: name,
        type: 'bar',
        stack: 'batch',
        barWidth: '60%',
        label: {
          show: false
        },
        emphasis: {
          focus: 'series'
        },
        itemStyle: {
          color: isActive ? '#4338ca' : '#60a5fa',
          borderColor: isActive ? '#16a34a' : undefined,
          borderWidth: isActive ? 2 : 0
        },
        data: batchSeriesData[name]
      };
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô Y ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    const maxBatchesInYear = years.reduce((max, year) => {
      const count = Array.isArray(yearlyBatches[year]) ? yearlyBatches[year].length : 0;
      return Math.max(max, count);
    }, 0);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô Y ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
    const maxParticipants = Math.max(...participantsData);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏≤‡∏ü
    const option = {
      title: {
        text: `‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalBatches} ‡∏£‡∏∏‡πà‡∏ô | ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏ö‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalParticipants} ‡∏Ñ‡∏ô`,
        left: 'center',
        top: 0,
        textStyle: {
          fontSize: 14,
          fontWeight: 'normal',
          color: '#6b7280'
        }
      },
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'shadow'
        },
        formatter: function(params: any) {
          const year = params[0].axisValue;
          const batches = yearlyBatches[year];
          if (!Array.isArray(batches)) return `‡∏õ‡∏µ ${year}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`;
          
          let tooltipText = `<div style="font-weight:bold;margin-bottom:5px;">‡∏õ‡∏µ ${year}</div>`;
          tooltipText += `<div>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∏‡πà‡∏ô: ${batches.length} ‡∏£‡∏∏‡πà‡∏ô</div>`;
          
          const totalParticipants = batches.reduce((sum, batch) => 
            sum + (batch._count?.participants || 0), 0);
          tooltipText += `<div>‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏ö‡∏£‡∏°: ${totalParticipants} ‡∏Ñ‡∏ô</div>`;
          
          tooltipText += `<div style="margin-top:5px;border-top:1px solid rgba(255,255,255,0.3);padding-top:5px;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏∏‡πà‡∏ô:</div>`;
          
          batches.forEach(batch => {
            const participants = batch._count?.participants || 0;
            const status = batch.isActive ? 'üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£' : '‚ö™ ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£';
            tooltipText += `<div>‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà ${batch.batchNumber}: ${participants} ‡∏Ñ‡∏ô ${status}</div>`;
          });
          
          return tooltipText;
        }
      },
      legend: {
        show: false
      },
      grid: {
        left: '3%',
        right: '4%',
        bottom: '10%',
        top: '60px',
        containLabel: true
      },
      toolbox: {
        show: true,
        feature: {
          saveAsImage: { show: true, title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' }
        }
      },
      xAxis: [
        {
          type: 'category',
          data: years,
          axisTick: { show: false },
          axisLabel: {
            rotate: 30,
            fontSize: 12
          }
        }
      ],
      yAxis: [
        {
          type: 'value',
          name: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∏‡πà‡∏ô',
          min: 0,
          max: Math.max(5, maxBatchesInYear + 1),
          position: 'left',
          axisLine: {
            show: true,
            lineStyle: {
              color: '#3b82f6'
            }
          },
          axisLabel: {
            formatter: '{value} ‡∏£‡∏∏‡πà‡∏ô'
          }
        },
        {
            type: 'value',
            name: '‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏ö‡∏£‡∏°',
            min: 0,
            max: Math.max(20, Math.ceil(maxParticipants * 1.2)),
            position: 'right',
            axisLine: {
              show: true,
              lineStyle: {
                color: '#f97316'
              }
            },
            axisLabel: {
              formatter: '{value} ‡∏Ñ‡∏ô'
            }
          }
        ],
        series: [
          ...batchSeries,
          {
            name: '‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏ö‡∏£‡∏°',
            type: 'line',
            yAxisIndex: 1,
            data: participantsData,
            symbol: 'circle',
            symbolSize: 8,
            itemStyle: {
              color: '#f97316'
            },
            lineStyle: {
              width: 3,
              type: 'solid'
            },
            label: {
              show: true,
              position: 'top',
              formatter: '{c} ‡∏Ñ‡∏ô',
              fontSize: 12
            },
            z: 10
          }
        ]
      };
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï chart
      if (chartInstance.current) {
        chartInstance.current.setOption(option, true);
      }
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      const handleResize = () => {
        if (chartInstance.current) {
          chartInstance.current.resize();
        }
      };
      
      window.addEventListener('resize', handleResize);
      
      return () => {
        window.removeEventListener('resize', handleResize);
      };
    }, [yearlyBatches]);
    
    if (!yearlyBatches || Object.keys(yearlyBatches).length === 0) {
      return (
        <div className="flex items-center justify-center h-full text-gray-500">
          <div className="text-center">
            <Calendar className="h-12 w-12 mx-auto text-gray-300 mb-2" />
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</p>
          </div>
        </div>
      );
    }
    
    return (
      <div ref={chartRef} className="w-full h-full" />
    );
  }